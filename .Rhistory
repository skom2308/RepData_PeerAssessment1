install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2 +100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2 +1000
my_div
getwd()
ls()
x<-9
ls
ls()
list.files()
dir()
?list.files
args(list.files)
old.dir<-dir()
old.dir<-getwd()
dir.create(testdir)
dir.create()
dir.create(/Users/skom/testdir)
?dir.create
dir.create(/Users/skom/testdir, showWarnings = TRUE, recursive = FALSE, mode = "0777")
dir.create("/Users/skom/testdir"", showWarnings = TRUE, recursive = FALSE, mode = "0777")
dir.create("/Users/skom/testdir", showWarnings = TRUE, recursive = FALSE, mode = "0777")
dir.create("testdir"")
0777
exit
ls
getwd()
bye
bye()
getwd()
exit
dir.exists("testdir")
ls
dir.create("testdir")
swtwd("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest-R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
?file.path
file.path("mytest3.R")
file.path('folder1')
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"),recursive= TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir",recursive = TRUE)
swirl()
bye()
exit
swirl()
library("swirl")
swirl()
bye
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
swirl()
1
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(1,length(my_seq))
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,time=40)
rep(0,times=40)
rep(c(1,2,3), times=10)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
bye()
library("twitteR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("httpuv", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
setup_twitter_oauth("bVTRdDhVqqPk7eNt8W1xf3jOW", "eKyv5CvEeQFhDpxqSYUhc5SuqgNpOLFr6Ff6UE3wnDIAPAq79u")
searchTwitter()
args(searchTwitteR)
searchTwitter("botellazo",n=50, lang="es")
library("twitteR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("tm", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("wordcloud", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("httpuv", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
setup_twitter_oauth("bVTRdDhVqqPk7eNt8W1xf3jOW", "eKyv5CvEeQFhDpxqSYUhc5SuqgNpOLFr6Ff6UE3wnDIAPAq79u")
ser_tweets = searchTwitter(“@botellazo", n=5000, lang="es")
ser_tweets = searchTwitter("@botellazo", n=5000, lang="es")
ser_text = sapply(ser_tweets, function(x) x$getText())
ser_corpus = Corpus(VectorSource(ser_text))
tdm = TermDocumentMatrix(ser_corpus,
control = list(removePunctuation = TRUE,
stopwords = c("machine", "learning", stopwords("spanish")),
removeNumbers = TRUE, tolower = TRUE))
m = as.matrix(tdm)
word_freqs = sort(rowSums(m), decreasing=TRUE)
m
dm = data.frame(word=names(word_freqs), freq=word_freqs)
dm
View(m)
View(dm)
word_freqs2 = sort(rowSums(m)>5, decreasing=TRUE)
word_freqs2
?worldcloud
?wordcloud
View(m)
View(dm)
wordcloud(dm$word, dm$freq, random.order=FALSE, min.freq=25,colors=brewer.pal(8, "Dark2"))
wordcloud(dm$word, dm$freq, random.order=FALSE, min.freq=20,colors=brewer.pal(8, "Dark2"))
wordcloud(dm$word, dm$freq, random.order=FALSE, min.freq=20,colors=brewer.pal(7, "Dark2"))
wordcloud(dm$word, dm$freq, random.order=FALSE, min.freq=20,colors=brewer.pal(25, "Dark2"))
wordcloud(dm$word, dm$freq, random.order=FALSE, min.freq=20,colors=brewer.pal(8, "Dark2"))
ser_tweets = searchTwitter("@", n=5000, lang="es")
install.packages(sentiment)
install.packages("sentiment")
StreamCapture = function(x) {
if (nchar(x) > 0) {
write.table(file = "TwitterStream1.txt", x, row.names = FALSE, col.names = FALSE,
append = TRUE)
}
}
rstats = searchTwitter("#rstats", n=5000, lang="en")
rstats = searchTwitter("#rstats", n=5000, lang="en")
rstats = searchTwitter("#rstats1", n=5000, lang="en")
ser_tweets = searchTwitter(“@jvcarrasquero", n=5000)
ser_tweets = searchTwitter("@jvcarrasquero", n=5000)
ser_tweets = searchTwitter("@jvcarrasquero", n=5000, lang="en")
library(twitter)
library("twitter")
library("twitteR")
library("tm")
install.packages(c("manipulate", "Rcpp"))
a<-available.packages()
head a
head(rownames(a),10)
install.packages("slidify")
search()
installed.packages("KernSmooth")
installed.packages(KernSmooth)
library(KernSmooth)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(2)
rpois(5, 2)
set.seed(2)
rpois(5, 2)
set.seed(2)
rpois(5, 2)
pnorm
rnmor
rnorm
qnorm
?qnorm
?rnorm
makeCacheMatrix <- function () {
b <- NULL
a <- matrix(rnorm(100, 20, 10), 10, 10)
b <- solve(a)
ma <<- get("a")
result <<- get("b")
list( ma = ma, result = result)
}
## If the inverse is set to NULL, this will re-calculate the inverse of the matrix.
cacheSolve <- function() {
if(!is.null(result)) {
message("getting cached data")
return(result)
}
nresult <- solve(ma)
result <<- nresult
print(result)
}
makeCacheMatrix()
makeCacheMatrix()
makeCacheMatrix()
makeCacheMatrix()
makeCacheMatrix()
makeCacheMatrix()
makeCacheMatrix()
makeCacheMatrix()
x<-makeCacheMatrix()
cachesolve()
cacheSolve()
cacheSolve()
cacheSolve()
cacheSolve()
cacheSolve()
makeCacheMatrix()
cacheSolve()
makeCacheMatrix()
cacheSolve()
quartz()
x<-rnorm(100)
x<-rnorm(1000)
hist(x)
hist(x, break=100)
hist(x, breaks=100)
hist(x, breaks=10)
hist(x, breaks=20)
hist(x, breaks=50)
hist(x, breaks=1000)
hist(x, breaks=10)
hist(x, breaks=2)
hist(x, breaks=3)
hist(x, breaks=4)
hist(x, breaks=5)
hist(x, breaks=25)
?Devices
colors()
?Devices
hist(x, breaks=25, col="tomato")
quartz()
windows()
hist(x, col="tomato")
plot(x, col="tomato")
hist(x, breaks=100, col="tomato")
hist(x, breaks=100, col="tomato")
quartz()
dev.off()
dev.cur()
quartz()
dev.cur()
dev.cur()
?plot
library(datasets)
?datasets
library(help = "datasets").
library(help = "datasets")
sleep
trees
hist(trees$Girth)
hist(trees$Volume)
summary(trees$Volume)
?par
install.packages(c("BH", "manipulate", "Matrix", "rversions", "testthat", "XML"))
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Reproducible Research")
setwd("~/Desktop/coursera/Rep_Research/RepData_PeerAssessment1")
read.csv("activity.csv")
act <- read.csv("activity.csv")
View(act)
View(act)
View(act)
as.Date(act[1,2])
act[1,2]
class(act[1,2])
class(act[2,2])
summary(act$date)
hist(steps)
hist(act$steps)
colors()
hist(act$steps, col="royalblue1")
hist(act$steps, col="skyblue")
colsum
?colsum
rowsum
?rowsum
sum(act$steps)
sum(act$steps, na.rm=T)
summary(act$date)
?rowsum
library(sqldf)
sqldf('select count(1) from act')
sqldf('select sum(steps) from act group by date')
sqldf('select date,sum(steps) from act group by date order by date')
steps_per_day <- sqldf('select date,sum(steps) from act group by date order by date')
View(steps_per_day)
library(sqldf)
library(sqldf)
steps_per_day <- sqldf('select date,sum(steps) step_count from act group by date order by date')
View(steps_per_day)
mean(steps_per_day$step_count)
mean(steps_per_day$step_count, na.rm=T)
steps_per_day$step_count
sum(steps_per_day$step_count)
sum(steps_per_day$step_count, na.rm=TRUE)
sum(as.numeric(steps_per_day$step_count), na.rm=TRUE)
sqldf(select sum(steps) from act)
sqldf("select sum(steps) from act")
mean(as.numeric(steps_per_day$step_count), na.rm=TRUE)
kable(steps_per_day)
library(knitr)
kable(steps_per_day)
?kable
kable(steps_per_day, format="html")
kable(steps_per_day, format="markdown")
mean(as.numeric(steps_per_day$step_count), na.rm=TRUE)
hist(steps_per_day)
hist(steps_per_day$steps)
hist(steps_per_day$step_count)
hist(as.numeric(steps_per_day$step_count)
)
hist(as.numeric(steps_per_day$step_count))
hist(as.numeric(steps_per_day$step_count), main="Histogram Total number of Steps taken each day")
hist(as.numeric(steps_per_day$step_count), main="Histogram Steps taken each day")
hist(as.numeric(steps_per_day$step_count), main="Histogram steps taken each day")
hist(as.numeric(steps_per_day$step_count), main="Histogram steps taken each day", xlab="Steps per day")
hist(as.numeric(steps_per_day$step_count), main="Histogram steps taken each day", xlab="Steps per day", col="red")
mean(as.numeric(steps_per_day$step_count), na.rm=TRUE)
?median
median(as.numeric(steps_per_day$step_count), na.rm=TRUE)
grouped<-group_by(act, interval)
library("dplyr")
grouped<-group_by(act, interval)
View(grouped)
df<- summarise(grouped, funs(mean))
df<- summarise_each(grouped, funs(mean))
View(df)
sqldf("select * from steps_per_day")
sqldf("select * from act")
sqldf("select * from act where steps='NA')
sqldf("select * from act where steps='NA'")
sqldf("select * from act where steps is null")
sqldf("select avg(steps) from act where steps is not null")
sqldf("select avg(step_count) from step_per_day where steps is not null")
sqldf("select avg(step_count) from steps_per_day where steps is not null")
sqldf("select avg(step_count) from steps_per_day where step_count is not null")
sqldf("select avg(steps) from act where steps is not null")
sqldf("select avg(steps), interval from act where steps is not null")
sqldf("select avg(steps), interval from act where steps is not null group by interval")
sqldf("select avg(steps), interval from act where steps is not null group by interval order by interval")
sqldf("select avg(steps) avg_steps, interval from act where steps is not null group by interval order by interval")
avg_steps_interval <- sqldf("select avg(steps) avg_steps, interval from act where steps is not null group by interval order by interval")
plot(avg_steps_interval$interval, avg_steps_interval$avg_steps)
plot(avg_steps_interval$interval, avg_steps_interval$avg_steps, type="l")
plot(avg_steps_interval$interval, avg_steps_interval$avg_steps, type="l", main="", xlab="", ylab="")
plot(avg_steps_interval$interval, avg_steps_interval$avg_steps, type="l")
plot(avg_steps_interval$interval, avg_steps_interval$avg_steps, type="l", main="", xlab="Time of Day HH24:MI", ylab="")
plot(avg_steps_interval$interval, avg_steps_interval$avg_steps, type="l", main="", xlab="Time of Day HH24MI", ylab="")
plot(avg_steps_interval$interval, avg_steps_interval$avg_steps, type="l", main="", xlab="Time of Day Format(HH24MI)", ylab="")
plot(avg_steps_interval$interval, avg_steps_interval$avg_steps, type="l", main="Average number of steps per 5 minute intervals", xlab="Time of Day Format(HH24MI)", ylab="")
plot(avg_steps_interval$interval, avg_steps_interval$avg_steps, type="l", main="Average number of steps per 5 min intervals", xlab="Time of Day Format(HH24MI)", ylab="")
plot(avg_steps_interval$interval, avg_steps_interval$avg_steps, type="l", main="Average number of steps per 5 min intervals", xlab="Time of Day Format(HH24MI)", ylab="")
plot(avg_steps_interval$interval, avg_steps_interval$avg_steps, type="l", main="Average number of steps per 5 min intervals", xlab="Time of Day Format(HH24MI)", ylab="Average number of steps taken")
plot(avg_steps_interval$interval, avg_steps_interval$avg_steps, type="l", main="Average number of steps per 5 min intervals", xlab="Time of Day Format(5 minute interval in format HH24MI)", ylab="Average number of steps taken")
sqldf("select interval from avg_steps_interval where avg_steps=max(avg_steps)")
sqldf("select max(avg_steps) from avg_steps_interval")
sqldf("select max(avg_steps), interval from avg_steps_interval")
sqldf("select interval from (select max(avg_steps), interval from avg_steps_interval)")
sqldf("select max(avg_steps), interval from avg_steps_interval")
sqldf("select max(avg_steps), interval from avg_steps_interval")
sqldf("select max(avg_steps), interval from avg_steps_interval")
sqldf("select max(avg_steps), interval from avg_steps_interval")
sqldf("select max(avg_steps) max_avg_steps, interval from avg_steps_interval")
act
is.na(act$steps)
sum(is.na(act$steps))
sqldf("select count(1) from act where steps is null")
head(act)
act2 <- act
sqldf("update act2 set steps=100000 where steps is null")
View(act2)
View(avg_steps_interval)
class(act2$steps)
is.na(act2$steps)
act2[is.na(act2$steps)]
act2$steps[is.na(act2$steps)]
act2[is.na(act2$steps)]
act2[is.na(act2$steps),]
act2[is.na(act2$steps)]
act2$steps[is.na(act2$steps)]
avg_steps_interval$interval
mean(act$steps, na.rm=T)
mean(act$steps, na.rm=T)
sqldf("select interval, count(1) from act where steps is null group by interval order by 2 des")
sqldf("select interval, count(1) from act where steps is null group by interval order by 2 desc")
act2$steps[is.na(act2$steps)]
act2$steps[is.na(act2$steps)]
act2$steps[is.na(act2$steps)] <- mean(act$steps, na.rm=T)
act2$steps[is.na(act2$steps)]
head(sqldf("select interval, count(1) from act where steps is null group by interval order by 2 desc"))
sqldf("select max(count), min(count) from (select interval, count(1) count from act where steps is null group by interval order by 2 desc"))
sqldf("select max(count), min(count) from (select interval, count(1) count from act where steps is null group by interval order by 2 desc")
sqldf("select max(count), min(count) from (select interval, count(1) count from act where steps is null group by interval)")
weekdays(act$date)
weekdays(as.Date(act$date)
)
weekdays(as.Date(act$date))
?weekdays
weekdays(as.Date(act2$date))
act2$weekday <- weekdays(as.Date(act2$date))
View(act2)
sqldf("select avg(steps) avg_steps, interval
from act where steps is not null group by interval order by interval")
avg_steps_interval_weekend <- sqldf("select avg(steps) avg_steps, interval
from act2 where weekday in ('Saturday','Sunday') group by interval order by interval")
avg_steps_interval_weekend <- sqldf("select avg(steps) avg_steps, interval
from act2 where weekday in ('Saturday','Sunday') group by interval order by interval")
avg_steps_interval_weekend <- sqldf("select avg(steps) avg_steps, interval
from act2 where weekday in ("Saturday","Sunday") group by interval order by interval")
avg_steps_interval_weekend <- sqldf("select avg(steps) avg_steps, interval
from act2 where weekday="Saturday"" group by interval order by interval")
avg_steps_interval_weekend <- sqldf("select avg(steps) avg_steps, interval
from act2 where weekday="Saturday" group by interval order by interval")
sqldf("select avg(steps) avg_steps, interval
from act2 where weekday in ('Saturday','Sunday') group by interval order by interval")
sqldf("select avg(steps) avg_steps, interval
from act2 where weekday in ('Saturday','Sunday') group by interval order by interval")
sqldf("select avg(steps) avg_steps, interval
from act2 where weekday not in ('Saturday','Sunday') group by interval order by interval")
